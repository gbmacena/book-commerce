generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uuid       String    @unique @default(uuid())
  id         Int       @id @unique @default(autoincrement())
  email      String    @unique
  password   String
  name       String
  username   String    @unique
  avatar     Bytes?
  birth_date DateTime?
  cpf        String?   @unique
  phone      String?
  isAdmin    Boolean   @default(false)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  cart          Cart[]
  addresses     userAddress[]
  creditCard    Credit_card[]
  favorites     Favorites[]
  orders        Order[]
  reviews       Review[]
  Recomendation Recomendation[]
}

model Credit_card {
  user_id    Int
  number     String
  name       String
  expiration String
  flag       String
  is_default Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user   User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  orders Order[]

  @@id([user_id, number])
}

model Review {
  id         Int      @id @default(autoincrement())
  uuid       String   @unique @default(uuid())
  user_id    Int
  book_id    Int
  rating     Decimal  @default(0.0) @db.Decimal(3, 1)
  content    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  book       Book     @relation(fields: [book_id], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Order {
  id                  Int           @id @default(autoincrement())
  user_id             Int
  cart_id             Int
  status              OrderStatus   @default(PENDING)
  payment             PaymentMethod
  address_id          Int
  subtotal            Decimal       @db.Decimal(10, 2)
  shipping            Decimal       @db.Decimal(10, 2)
  total               Decimal       @db.Decimal(10, 2)
  credit_card_user_id Int?
  credit_card_number  String?
  created_at          DateTime      @default(now())
  updated_at          DateTime      @updatedAt

  user        User         @relation(fields: [user_id], references: [id])
  address     Address      @relation(fields: [address_id], references: [id])
  credit_card Credit_card? @relation(fields: [credit_card_user_id, credit_card_number], references: [user_id, number])
  cart        Cart         @relation(fields: [cart_id], references: [id])

  items OrderItem[]
}

model OrderItem {
  id          Int     @id @default(autoincrement())
  order_id    Int
  book_id     Int
  quantity    Int
  price       Decimal @default(0.00) @db.Decimal(10, 2)
  total_price Decimal @db.Decimal(10, 2)

  book  Book  @relation(fields: [book_id], references: [id])
  order Order @relation(fields: [order_id], references: [id])
}

enum OrderStatus {
  PENDING
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  BOLETO
  PIX
}

model Cart {
  id         Int        @id @default(autoincrement())
  user_id    Int
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  totalPrice Decimal    @default(0.00) @db.Decimal(10, 2)
  user       User       @relation(fields: [user_id], references: [id])
  cartItem   CartItem[]
  Order      Order[]
}

model CartItem {
  id         Int      @id @default(autoincrement())
  cart_id    Int
  book_id    Int
  quantity   Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  price      Decimal  @default(0.00) @db.Decimal(10, 2)
  book       Book     @relation(fields: [book_id], references: [id])
  cart       Cart     @relation(fields: [cart_id], references: [id])
}

model Address {
  id           Int      @id @default(autoincrement())
  street       String
  number       String
  neighborhood String?
  complement   String?
  city         String
  state        String
  zip_code     String
  country      String   @default("Brasil")
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  userAddress userAddress[]
  orders      Order[]
}

model userAddress {
  id         String   @id @default(uuid())
  user_id    Int
  address_id Int
  is_default Boolean  @default(false)
  label      String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  address Address @relation(fields: [address_id], references: [id])
  user    User    @relation(fields: [user_id], references: [id])

  @@unique([user_id, address_id])
}

model Book {
  title          String
  synopsis       String
  image          Bytes?
  image_url      String?         @default("")
  language       String
  price          Float
  ISBN           String          @unique
  rating         Float           @default(0)
  favorite_count Int             @default(0)
  page_count     Int
  release_date   DateTime
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt
  uuid           String          @unique @default(uuid())
  id             Int             @id @default(autoincrement())
  stock_quantity Int             @default(0)
  cartItem       CartItem[]
  favorites      Favorites[]
  orderItem      OrderItem[]
  review         Review[]
  stocks         Stock[]
  authors        bookAuthor[]
  genres         bookGenre[]
  publishers     bookPublisher[]
  Recomendation  Recomendation[]
}

model Recomendation {
  id      String @id @default(uuid())
  user_id Int
  book_id Int

  book Book @relation(fields: [book_id], references: [id])
  user User @relation(fields: [user_id], references: [id])
}

model Genre {
  name       String      @unique
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  id         Int         @id @default(autoincrement())
  books      bookGenre[]
}

model Author {
  name          String       @unique
  bio           String
  year_of_birth DateTime
  image         Bytes?
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  id            Int          @id @default(autoincrement())
  books         bookAuthor[]
}

model Publisher {
  name       String          @unique
  created_at DateTime        @default(now())
  updated_at DateTime        @updatedAt
  id         Int             @id @default(autoincrement())
  books      bookPublisher[]
}

model bookGenre {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  book_id    Int
  id         Int      @id @default(autoincrement())
  genre_id   Int
  book       Book     @relation(fields: [book_id], references: [id], onDelete: Cascade)
  genre      Genre    @relation(fields: [genre_id], references: [id], onDelete: Cascade)
}

model bookAuthor {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  book_id    Int
  author_id  Int
  id         Int      @id @default(autoincrement())
  author     Author   @relation(fields: [author_id], references: [id], onDelete: Cascade)
  book       Book     @relation(fields: [book_id], references: [id], onDelete: Cascade)
}

model bookPublisher {
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  book_id      Int
  publisher_id Int
  id           Int       @id @default(autoincrement())
  book         Book      @relation(fields: [book_id], references: [id], onDelete: Cascade)
  publisher    Publisher @relation(fields: [publisher_id], references: [id], onDelete: Cascade)
}

model Stock {
  book_id    Int
  quantity   Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  id         Int      @id @default(autoincrement())
  book       Book     @relation(fields: [book_id], references: [id], onDelete: Cascade)
}

model Favorites {
  id         Int      @default(autoincrement())
  user_id    Int
  book_id    Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  book       Book     @relation(fields: [book_id], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id, book_id])
}
